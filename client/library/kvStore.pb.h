// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvStore.proto

#ifndef PROTOBUF_INCLUDED_kvStore_2eproto
#define PROTOBUF_INCLUDED_kvStore_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kvStore_2eproto 

namespace protobuf_kvStore_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kvStore_2eproto
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::GetRequest* Arena::CreateMaybeMessage<::GetRequest>(Arena*);
template<> ::GetResponse* Arena::CreateMaybeMessage<::GetResponse>(Arena*);
template<> ::PutRequest* Arena::CreateMaybeMessage<::PutRequest>(Arena*);
template<> ::PutResponse* Arena::CreateMaybeMessage<::PutResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(NULL);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string requestKey = 1;
  void clear_requestkey();
  static const int kRequestKeyFieldNumber = 1;
  const ::std::string& requestkey() const;
  void set_requestkey(const ::std::string& value);
  #if LANG_CXX11
  void set_requestkey(::std::string&& value);
  #endif
  void set_requestkey(const char* value);
  void set_requestkey(const char* value, size_t size);
  ::std::string* mutable_requestkey();
  ::std::string* release_requestkey();
  void set_allocated_requestkey(::std::string* requestkey);

  // string requestValue = 2;
  void clear_requestvalue();
  static const int kRequestValueFieldNumber = 2;
  const ::std::string& requestvalue() const;
  void set_requestvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_requestvalue(::std::string&& value);
  #endif
  void set_requestvalue(const char* value);
  void set_requestvalue(const char* value, size_t size);
  ::std::string* mutable_requestvalue();
  ::std::string* release_requestvalue();
  void set_allocated_requestvalue(::std::string* requestvalue);

  // @@protoc_insertion_point(class_scope:GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr requestkey_;
  ::google::protobuf::internal::ArenaStringPtr requestvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvStore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(NULL);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string responseKey = 1;
  void clear_responsekey();
  static const int kResponseKeyFieldNumber = 1;
  const ::std::string& responsekey() const;
  void set_responsekey(const ::std::string& value);
  #if LANG_CXX11
  void set_responsekey(::std::string&& value);
  #endif
  void set_responsekey(const char* value);
  void set_responsekey(const char* value, size_t size);
  ::std::string* mutable_responsekey();
  ::std::string* release_responsekey();
  void set_allocated_responsekey(::std::string* responsekey);

  // string responseValue = 2;
  void clear_responsevalue();
  static const int kResponseValueFieldNumber = 2;
  const ::std::string& responsevalue() const;
  void set_responsevalue(const ::std::string& value);
  #if LANG_CXX11
  void set_responsevalue(::std::string&& value);
  #endif
  void set_responsevalue(const char* value);
  void set_responsevalue(const char* value, size_t size);
  ::std::string* mutable_responsevalue();
  ::std::string* release_responsevalue();
  void set_allocated_responsevalue(::std::string* responsevalue);

  // int32 status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsekey_;
  ::google::protobuf::internal::ArenaStringPtr responsevalue_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvStore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(NULL);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string requestKey = 1;
  void clear_requestkey();
  static const int kRequestKeyFieldNumber = 1;
  const ::std::string& requestkey() const;
  void set_requestkey(const ::std::string& value);
  #if LANG_CXX11
  void set_requestkey(::std::string&& value);
  #endif
  void set_requestkey(const char* value);
  void set_requestkey(const char* value, size_t size);
  ::std::string* mutable_requestkey();
  ::std::string* release_requestkey();
  void set_allocated_requestkey(::std::string* requestkey);

  // string requestNewValue = 2;
  void clear_requestnewvalue();
  static const int kRequestNewValueFieldNumber = 2;
  const ::std::string& requestnewvalue() const;
  void set_requestnewvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_requestnewvalue(::std::string&& value);
  #endif
  void set_requestnewvalue(const char* value);
  void set_requestnewvalue(const char* value, size_t size);
  ::std::string* mutable_requestnewvalue();
  ::std::string* release_requestnewvalue();
  void set_allocated_requestnewvalue(::std::string* requestnewvalue);

  // string requestOldValue = 3;
  void clear_requestoldvalue();
  static const int kRequestOldValueFieldNumber = 3;
  const ::std::string& requestoldvalue() const;
  void set_requestoldvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_requestoldvalue(::std::string&& value);
  #endif
  void set_requestoldvalue(const char* value);
  void set_requestoldvalue(const char* value, size_t size);
  ::std::string* mutable_requestoldvalue();
  ::std::string* release_requestoldvalue();
  void set_allocated_requestoldvalue(::std::string* requestoldvalue);

  // @@protoc_insertion_point(class_scope:PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr requestkey_;
  ::google::protobuf::internal::ArenaStringPtr requestnewvalue_;
  ::google::protobuf::internal::ArenaStringPtr requestoldvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvStore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(NULL);
  }

  PutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string responseKey = 1;
  void clear_responsekey();
  static const int kResponseKeyFieldNumber = 1;
  const ::std::string& responsekey() const;
  void set_responsekey(const ::std::string& value);
  #if LANG_CXX11
  void set_responsekey(::std::string&& value);
  #endif
  void set_responsekey(const char* value);
  void set_responsekey(const char* value, size_t size);
  ::std::string* mutable_responsekey();
  ::std::string* release_responsekey();
  void set_allocated_responsekey(::std::string* responsekey);

  // string responseNewValue = 2;
  void clear_responsenewvalue();
  static const int kResponseNewValueFieldNumber = 2;
  const ::std::string& responsenewvalue() const;
  void set_responsenewvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_responsenewvalue(::std::string&& value);
  #endif
  void set_responsenewvalue(const char* value);
  void set_responsenewvalue(const char* value, size_t size);
  ::std::string* mutable_responsenewvalue();
  ::std::string* release_responsenewvalue();
  void set_allocated_responsenewvalue(::std::string* responsenewvalue);

  // string responseOldValue = 3;
  void clear_responseoldvalue();
  static const int kResponseOldValueFieldNumber = 3;
  const ::std::string& responseoldvalue() const;
  void set_responseoldvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_responseoldvalue(::std::string&& value);
  #endif
  void set_responseoldvalue(const char* value);
  void set_responseoldvalue(const char* value, size_t size);
  ::std::string* mutable_responseoldvalue();
  ::std::string* release_responseoldvalue();
  void set_allocated_responseoldvalue(::std::string* responseoldvalue);

  // int32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsekey_;
  ::google::protobuf::internal::ArenaStringPtr responsenewvalue_;
  ::google::protobuf::internal::ArenaStringPtr responseoldvalue_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvStore_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// string requestKey = 1;
inline void GetRequest::clear_requestkey() {
  requestkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::requestkey() const {
  // @@protoc_insertion_point(field_get:GetRequest.requestKey)
  return requestkey_.GetNoArena();
}
inline void GetRequest::set_requestkey(const ::std::string& value) {
  
  requestkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetRequest.requestKey)
}
#if LANG_CXX11
inline void GetRequest::set_requestkey(::std::string&& value) {
  
  requestkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetRequest.requestKey)
}
#endif
inline void GetRequest::set_requestkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetRequest.requestKey)
}
inline void GetRequest::set_requestkey(const char* value, size_t size) {
  
  requestkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetRequest.requestKey)
}
inline ::std::string* GetRequest::mutable_requestkey() {
  
  // @@protoc_insertion_point(field_mutable:GetRequest.requestKey)
  return requestkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_requestkey() {
  // @@protoc_insertion_point(field_release:GetRequest.requestKey)
  
  return requestkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_requestkey(::std::string* requestkey) {
  if (requestkey != NULL) {
    
  } else {
    
  }
  requestkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestkey);
  // @@protoc_insertion_point(field_set_allocated:GetRequest.requestKey)
}

// string requestValue = 2;
inline void GetRequest::clear_requestvalue() {
  requestvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::requestvalue() const {
  // @@protoc_insertion_point(field_get:GetRequest.requestValue)
  return requestvalue_.GetNoArena();
}
inline void GetRequest::set_requestvalue(const ::std::string& value) {
  
  requestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetRequest.requestValue)
}
#if LANG_CXX11
inline void GetRequest::set_requestvalue(::std::string&& value) {
  
  requestvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetRequest.requestValue)
}
#endif
inline void GetRequest::set_requestvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetRequest.requestValue)
}
inline void GetRequest::set_requestvalue(const char* value, size_t size) {
  
  requestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetRequest.requestValue)
}
inline ::std::string* GetRequest::mutable_requestvalue() {
  
  // @@protoc_insertion_point(field_mutable:GetRequest.requestValue)
  return requestvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_requestvalue() {
  // @@protoc_insertion_point(field_release:GetRequest.requestValue)
  
  return requestvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_requestvalue(::std::string* requestvalue) {
  if (requestvalue != NULL) {
    
  } else {
    
  }
  requestvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestvalue);
  // @@protoc_insertion_point(field_set_allocated:GetRequest.requestValue)
}

// -------------------------------------------------------------------

// GetResponse

// string responseKey = 1;
inline void GetResponse::clear_responsekey() {
  responsekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::responsekey() const {
  // @@protoc_insertion_point(field_get:GetResponse.responseKey)
  return responsekey_.GetNoArena();
}
inline void GetResponse::set_responsekey(const ::std::string& value) {
  
  responsekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetResponse.responseKey)
}
#if LANG_CXX11
inline void GetResponse::set_responsekey(::std::string&& value) {
  
  responsekey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetResponse.responseKey)
}
#endif
inline void GetResponse::set_responsekey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetResponse.responseKey)
}
inline void GetResponse::set_responsekey(const char* value, size_t size) {
  
  responsekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetResponse.responseKey)
}
inline ::std::string* GetResponse::mutable_responsekey() {
  
  // @@protoc_insertion_point(field_mutable:GetResponse.responseKey)
  return responsekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_responsekey() {
  // @@protoc_insertion_point(field_release:GetResponse.responseKey)
  
  return responsekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_responsekey(::std::string* responsekey) {
  if (responsekey != NULL) {
    
  } else {
    
  }
  responsekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsekey);
  // @@protoc_insertion_point(field_set_allocated:GetResponse.responseKey)
}

// string responseValue = 2;
inline void GetResponse::clear_responsevalue() {
  responsevalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::responsevalue() const {
  // @@protoc_insertion_point(field_get:GetResponse.responseValue)
  return responsevalue_.GetNoArena();
}
inline void GetResponse::set_responsevalue(const ::std::string& value) {
  
  responsevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetResponse.responseValue)
}
#if LANG_CXX11
inline void GetResponse::set_responsevalue(::std::string&& value) {
  
  responsevalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetResponse.responseValue)
}
#endif
inline void GetResponse::set_responsevalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetResponse.responseValue)
}
inline void GetResponse::set_responsevalue(const char* value, size_t size) {
  
  responsevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetResponse.responseValue)
}
inline ::std::string* GetResponse::mutable_responsevalue() {
  
  // @@protoc_insertion_point(field_mutable:GetResponse.responseValue)
  return responsevalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_responsevalue() {
  // @@protoc_insertion_point(field_release:GetResponse.responseValue)
  
  return responsevalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_responsevalue(::std::string* responsevalue) {
  if (responsevalue != NULL) {
    
  } else {
    
  }
  responsevalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsevalue);
  // @@protoc_insertion_point(field_set_allocated:GetResponse.responseValue)
}

// int32 status = 3;
inline void GetResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 GetResponse::status() const {
  // @@protoc_insertion_point(field_get:GetResponse.status)
  return status_;
}
inline void GetResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:GetResponse.status)
}

// -------------------------------------------------------------------

// PutRequest

// string requestKey = 1;
inline void PutRequest::clear_requestkey() {
  requestkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::requestkey() const {
  // @@protoc_insertion_point(field_get:PutRequest.requestKey)
  return requestkey_.GetNoArena();
}
inline void PutRequest::set_requestkey(const ::std::string& value) {
  
  requestkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PutRequest.requestKey)
}
#if LANG_CXX11
inline void PutRequest::set_requestkey(::std::string&& value) {
  
  requestkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PutRequest.requestKey)
}
#endif
inline void PutRequest::set_requestkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PutRequest.requestKey)
}
inline void PutRequest::set_requestkey(const char* value, size_t size) {
  
  requestkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PutRequest.requestKey)
}
inline ::std::string* PutRequest::mutable_requestkey() {
  
  // @@protoc_insertion_point(field_mutable:PutRequest.requestKey)
  return requestkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_requestkey() {
  // @@protoc_insertion_point(field_release:PutRequest.requestKey)
  
  return requestkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_requestkey(::std::string* requestkey) {
  if (requestkey != NULL) {
    
  } else {
    
  }
  requestkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestkey);
  // @@protoc_insertion_point(field_set_allocated:PutRequest.requestKey)
}

// string requestNewValue = 2;
inline void PutRequest::clear_requestnewvalue() {
  requestnewvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::requestnewvalue() const {
  // @@protoc_insertion_point(field_get:PutRequest.requestNewValue)
  return requestnewvalue_.GetNoArena();
}
inline void PutRequest::set_requestnewvalue(const ::std::string& value) {
  
  requestnewvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PutRequest.requestNewValue)
}
#if LANG_CXX11
inline void PutRequest::set_requestnewvalue(::std::string&& value) {
  
  requestnewvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PutRequest.requestNewValue)
}
#endif
inline void PutRequest::set_requestnewvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestnewvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PutRequest.requestNewValue)
}
inline void PutRequest::set_requestnewvalue(const char* value, size_t size) {
  
  requestnewvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PutRequest.requestNewValue)
}
inline ::std::string* PutRequest::mutable_requestnewvalue() {
  
  // @@protoc_insertion_point(field_mutable:PutRequest.requestNewValue)
  return requestnewvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_requestnewvalue() {
  // @@protoc_insertion_point(field_release:PutRequest.requestNewValue)
  
  return requestnewvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_requestnewvalue(::std::string* requestnewvalue) {
  if (requestnewvalue != NULL) {
    
  } else {
    
  }
  requestnewvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestnewvalue);
  // @@protoc_insertion_point(field_set_allocated:PutRequest.requestNewValue)
}

// string requestOldValue = 3;
inline void PutRequest::clear_requestoldvalue() {
  requestoldvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::requestoldvalue() const {
  // @@protoc_insertion_point(field_get:PutRequest.requestOldValue)
  return requestoldvalue_.GetNoArena();
}
inline void PutRequest::set_requestoldvalue(const ::std::string& value) {
  
  requestoldvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PutRequest.requestOldValue)
}
#if LANG_CXX11
inline void PutRequest::set_requestoldvalue(::std::string&& value) {
  
  requestoldvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PutRequest.requestOldValue)
}
#endif
inline void PutRequest::set_requestoldvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestoldvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PutRequest.requestOldValue)
}
inline void PutRequest::set_requestoldvalue(const char* value, size_t size) {
  
  requestoldvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PutRequest.requestOldValue)
}
inline ::std::string* PutRequest::mutable_requestoldvalue() {
  
  // @@protoc_insertion_point(field_mutable:PutRequest.requestOldValue)
  return requestoldvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_requestoldvalue() {
  // @@protoc_insertion_point(field_release:PutRequest.requestOldValue)
  
  return requestoldvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_requestoldvalue(::std::string* requestoldvalue) {
  if (requestoldvalue != NULL) {
    
  } else {
    
  }
  requestoldvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestoldvalue);
  // @@protoc_insertion_point(field_set_allocated:PutRequest.requestOldValue)
}

// -------------------------------------------------------------------

// PutResponse

// string responseKey = 1;
inline void PutResponse::clear_responsekey() {
  responsekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutResponse::responsekey() const {
  // @@protoc_insertion_point(field_get:PutResponse.responseKey)
  return responsekey_.GetNoArena();
}
inline void PutResponse::set_responsekey(const ::std::string& value) {
  
  responsekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PutResponse.responseKey)
}
#if LANG_CXX11
inline void PutResponse::set_responsekey(::std::string&& value) {
  
  responsekey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PutResponse.responseKey)
}
#endif
inline void PutResponse::set_responsekey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PutResponse.responseKey)
}
inline void PutResponse::set_responsekey(const char* value, size_t size) {
  
  responsekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PutResponse.responseKey)
}
inline ::std::string* PutResponse::mutable_responsekey() {
  
  // @@protoc_insertion_point(field_mutable:PutResponse.responseKey)
  return responsekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutResponse::release_responsekey() {
  // @@protoc_insertion_point(field_release:PutResponse.responseKey)
  
  return responsekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_allocated_responsekey(::std::string* responsekey) {
  if (responsekey != NULL) {
    
  } else {
    
  }
  responsekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsekey);
  // @@protoc_insertion_point(field_set_allocated:PutResponse.responseKey)
}

// string responseNewValue = 2;
inline void PutResponse::clear_responsenewvalue() {
  responsenewvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutResponse::responsenewvalue() const {
  // @@protoc_insertion_point(field_get:PutResponse.responseNewValue)
  return responsenewvalue_.GetNoArena();
}
inline void PutResponse::set_responsenewvalue(const ::std::string& value) {
  
  responsenewvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PutResponse.responseNewValue)
}
#if LANG_CXX11
inline void PutResponse::set_responsenewvalue(::std::string&& value) {
  
  responsenewvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PutResponse.responseNewValue)
}
#endif
inline void PutResponse::set_responsenewvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsenewvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PutResponse.responseNewValue)
}
inline void PutResponse::set_responsenewvalue(const char* value, size_t size) {
  
  responsenewvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PutResponse.responseNewValue)
}
inline ::std::string* PutResponse::mutable_responsenewvalue() {
  
  // @@protoc_insertion_point(field_mutable:PutResponse.responseNewValue)
  return responsenewvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutResponse::release_responsenewvalue() {
  // @@protoc_insertion_point(field_release:PutResponse.responseNewValue)
  
  return responsenewvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_allocated_responsenewvalue(::std::string* responsenewvalue) {
  if (responsenewvalue != NULL) {
    
  } else {
    
  }
  responsenewvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsenewvalue);
  // @@protoc_insertion_point(field_set_allocated:PutResponse.responseNewValue)
}

// string responseOldValue = 3;
inline void PutResponse::clear_responseoldvalue() {
  responseoldvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutResponse::responseoldvalue() const {
  // @@protoc_insertion_point(field_get:PutResponse.responseOldValue)
  return responseoldvalue_.GetNoArena();
}
inline void PutResponse::set_responseoldvalue(const ::std::string& value) {
  
  responseoldvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PutResponse.responseOldValue)
}
#if LANG_CXX11
inline void PutResponse::set_responseoldvalue(::std::string&& value) {
  
  responseoldvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PutResponse.responseOldValue)
}
#endif
inline void PutResponse::set_responseoldvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responseoldvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PutResponse.responseOldValue)
}
inline void PutResponse::set_responseoldvalue(const char* value, size_t size) {
  
  responseoldvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PutResponse.responseOldValue)
}
inline ::std::string* PutResponse::mutable_responseoldvalue() {
  
  // @@protoc_insertion_point(field_mutable:PutResponse.responseOldValue)
  return responseoldvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutResponse::release_responseoldvalue() {
  // @@protoc_insertion_point(field_release:PutResponse.responseOldValue)
  
  return responseoldvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_allocated_responseoldvalue(::std::string* responseoldvalue) {
  if (responseoldvalue != NULL) {
    
  } else {
    
  }
  responseoldvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responseoldvalue);
  // @@protoc_insertion_point(field_set_allocated:PutResponse.responseOldValue)
}

// int32 status = 4;
inline void PutResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 PutResponse::status() const {
  // @@protoc_insertion_point(field_get:PutResponse.status)
  return status_;
}
inline void PutResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:PutResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kvStore_2eproto
